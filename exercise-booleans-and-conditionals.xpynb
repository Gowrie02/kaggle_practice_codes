#To get started

from learntools.core import binder; binder.bind(globals())
from learntools.python.ex3 import *
print('Setup complete.')

#Many programming languages have sign available as a built-in function. Python doesn't, but we can define our own!

def sign(x):
    if x > 0:
        return 1
    elif x < 0:
        return -1
    else:
        return 0

#add "logging" to our to_sm

def to_smash(total_candies):
    """Return the number of leftover candies that must be smashed after distributing
    the given number of candies evenly between 3 friends.
    
    >>> to_smash(91)
    1
    """
    print("Splitting", total_candies, "candies")
    return total_candies % 3

to_smash(91)

#output

Splitting 91 candies

#the cell below to correct the grammar of our print statement. 

def to_smash(total_candies):
    if total_candies == 1:
        print("Splitting 1 candy")
    else:
        print("Splitting", total_candies, "candies")
    return total_candies % 3

to_smash(91)
to_smash(1)

#output


Splitting 91 candies
Splitting 1 candy

#In the tutorial, we talked about deciding whether we're prepared for the weather. I said that I'm safe from today's weather if...
#- I have an umbrella...
- or if the rain isn't too heavy and I have a hood...
# otherwise, I'm still fine unless it's raining *and* it's a workday

#The function below uses our first attempt at turning this logic into a Python expression. I claimed that there was a bug in that code. Can you find it?

#To prove that `prepared_for_weather` is buggy, come up with a set of inputs where either:
#- the function returns `False` (but should have returned `True`), or
#- the function returned `True` (but should have returned `False`).


def prepared_for_weather(have_umbrella, rain_level, have_hood, is_workday):
   
    return have_umbrella or rain_level < 5 and have_hood or not rain_level > 0 and is_workday

# Change the values of these inputs so they represent a case where prepared_for_weather
# returns the wrong answer.
have_umbrella = False
rain_level = 0.0
have_hood = False
is_workday = False

# Check what the function returns given the current values of the variables above
actual = prepared_for_weather(have_umbrella, rain_level, have_hood, is_workday)
print(actual)

#output
False

#The function is_negative below is implemented correctly - it returns True if the given number is negative and False otherwise.

def is_negative(number):
    if number < 0:
        return True 
    else:
        return False

def concise_is_negative(number):
    pass # Your code goes here (try to keep it to one line!)
    return number<0

#The boolean variables ketchup, mustard and onion represent whether a customer wants a particular topping on their hot dog. We want to implement a number of boolean functions that correspond to some yes-or-no questions about the customer's order

def wants_all_toppings(ketchup, mustard, onion):
    """Return whether the customer wants "the works" (all 3 toppings)
    """
    return ketchup and mustard and onion 
    pass

#For the next function, fill in the body to match the English description in the docstring.

def wants_plain_hotdog(ketchup, mustard, onion):
    """Return whether the customer wants a plain hot dog with no toppings.
    """
    return not ketchup and not mustard and not onion
    pass

#You know what to do: for the next function, fill in the body to match the English description in the docstring.

def exactly_one_sauce(ketchup, mustard, onion):
    """Return whether the customer wants either ketchup or mustard, but not both.
    (You may be familiar with this operation under the name "exclusive or")
    """
    return (ketchup and not mustard) or (mustard and not ketchup)
    pass

#We’ve seen that calling bool() on an integer returns False if it’s equal to 0 and True otherwise. What happens if we call int() on a bool? Try it out in the notebook cell below.
def exactly_one_topping(ketchup, mustard, onion):
    """Return whether the customer wants exactly one of the three available toppings
    on their hot dog.
    """
    return (int(ketchup) + int(mustard) + int(onion)) == 1
    pass
